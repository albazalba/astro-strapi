---
// No server-side fetching here
---

<section class="product-grid">
  <h2>SHOP</h2>
  <div id="products-container" class="grid">
    <!-- Products will be loaded here -->
  </div>
  <button id="show-more" class="show-more" style="display: none;">Show more</button>
</section>

<script>
  async function fetchProducts() {
    try {
      // Retrieve the token from localStorage
      const token = localStorage.getItem('token');

      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch('/api/products', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) throw new Error('Failed to fetch products');
      const { data: products } = await response.json();

      const apiBaseUrl = 'http://localhost:1337'; // Replace with your actual API base URL
      const container = document.getElementById('products-container');
      container.innerHTML = products.map(product => `
        <a href="/product/${product.id}" class="product-card">
          <img src="${apiBaseUrl}${product.attributes.image.data[0].attributes.url}" alt="${product.attributes.name}" />
          <h3 style="padding: 1rem">${product.attributes.title}</h3>
          <p class="price">$${product.attributes.price}</p>
          <button class="add-to-cart" data-product-id="${product.id}">Add to cart</button>
        </a>
      `).join('');

      if (products.length > 0) {
        document.getElementById('show-more').style.display = 'block';
      }
    } catch (error) {
      console.error('Error fetching products:', error);
      document.getElementById('products-container').innerHTML = `<p class="error">Error loading products: ${error.message}</p>`;
    }

  }

  async function addToCart(productId) {
    try {
      const token = localStorage.getItem('token');
      const user = localStorage.getItem('user')
      console.log("ðŸš€ ~ addToCart ~ user:", user)
      if (!token) {
        throw new Error('No authentication token found');
      }

      const response = await fetch('/api/cart', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ userId: JSON.parse(user).id, productId, quantity:1 })
      });

      if (!response.ok) throw new Error('Failed to add product to cart');
      const result = await response.json();
      console.log('Product added to cart:', result);
      alert('Product added to cart successfully!');
    } catch (error) {
      console.error('Error adding product to cart:', error);
      alert(`Error adding product to cart: ${error.message}`);
    }
  }

  function setupEventListeners() {
    const container = document.getElementById('products-container');
    container.addEventListener('click', (event) => {
      if (event.target.classList.contains('add-to-cart')) {
        event.preventDefault();
        const productId = event.target.dataset.productId;
        addToCart(productId);
      }
    });
  }

  // Call the functions when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    fetchProducts();
    setupEventListeners();
  });
</script>

<style>
  /* Add this line to ensure styles are scoped to this component */
  :root {
    --product-card-border: 1px solid #686565;
  }

  .product-grid {
    padding: 2rem;
  }
  :global(.product-card) {
    border: 1px solid #e8e7e7;
    text-decoration: none;
    color: inherit;
    display: block;
    transition: transform 0.2s;
    background:white;
    border-radius: 10px;
    overflow: hidden;
  }
  :global(.product-card:hover) {
    transform: translateY(-5px);
  }
  :global(.add-to-cart) {
    margin-left: 1rem;
    margin-bottom: 1rem;
    background: rgb(230, 240, 242);
    padding: 5px;
    outline:none;
    border: 1px solid rgb(166, 165, 165);
    border-radius: 5px;
    cursor: pointer;
}
  .grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
  }

  :global(.product-card img) {
    width: 100%;
    height: 200px;
    object-fit: cover;
}
:global(.price) {
      padding: 1rem;
    font-weight: bold;
  }
  :global(.show-more) {
    display: block;
    margin: 2rem auto;
    padding: 0.5rem 1rem;
    background-color: black;
    color: white;
    border: none;
    cursor: pointer;
  }
  .reviews {
    color: #666;
    font-size: 0.9rem;
  }
  .show-more {
    display: block;
    margin: 2rem auto;
    padding: 0.5rem 1rem;
    background-color: black;
    color: white;
    border: none;
    cursor: pointer;
  }
  .error {
    color: red;
    text-align: center;
  }
</style>
